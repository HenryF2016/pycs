#!/usr/bin/python
# -----------------------------------------------------------------------------
"""

Convert x.svd to x.py.

x.svd is a CMSIS System View Description file describing a device.
x.py is the same information presented as *.py code useable by pycs.

"""
# -----------------------------------------------------------------------------

import os
import sys

import lxml.etree as ET

# -----------------------------------------------------------------------------

svd2py_version = 1
svd_file = None

# -----------------------------------------------------------------------------

def string_cleanup(s):
  """remove extra spaces and carriage returns from a string"""
  if s is None:
    return s
  return ' '.join([x.strip() for x in s.split()])

# -----------------------------------------------------------------------------

class svd_register(object):
  """class for an register"""
  def __init__(self):
    pass

  def attribute(self, x):
    name, value = x
    if not value is None:
      object.__setattr__(self, name, value)

  def __getattr__(self, name):
    return None


class svd_interrupt(object):
  """class for an interrupt"""
  def __init__(self):
    pass

  def attribute(self, x):
    name, value = x
    if not value is None:
      object.__setattr__(self, name, value)

  def __getattr__(self, name):
    return None


class svd_address_block(object):
  """class for an address block"""
  def __init__(self):
    pass

  def attribute(self, x):
    name, value = x
    if not value is None:
      object.__setattr__(self, name, value)

  def __getattr__(self, name):
    return None


class svd_peripheral(object):
  """class for peripheral attributes"""
  def __init__(self):
    pass

  def attribute(self, x):
    name, value = x
    if not value is None:
      object.__setattr__(self, name, value)

  def __getattr__(self, name):
    return None


class svd_cpu(object):
  """class for cpu attributes"""
  def __init__(self):
    pass

  def attribute(self, x):
    name, value = x
    if not value is None:
      object.__setattr__(self, name, value)

  def __getattr__(self, name):
    return None

  def attribute_string(self, s, name):
    if self.__dict__.has_key(name):
      s.append("  '%s': '%s'," % (name, self.__dict__[name]))
    else:
      s.append("  # '%s': ?" % (name))

  def attribute_boolean(self, s, name):
    if self.__dict__.has_key(name):
      s.append("  '%s': %s," % (name, str(self.__dict__[name])))
    else:
      s.append("  # '%s': ?" % (name))

  def attribute_integer(self, s, name):
    if self.__dict__.has_key(name):
      s.append("  '%s': %d," % (name, self.__dict__[name]))
    else:
      s.append("  # '%s': ?" % (name))


class svd_device(object):
  """class for device attributes"""

  def __init__(self):
    pass

  def lookup_peripheral(self, name):
    """lookup peripheral by name"""
    for p in self.peripherals:
      if p.name == name:
        return p
    return None

  def attribute(self, x):
    name, value = x
    if not value is None:
      object.__setattr__(self, name, value)

  def __getattr__(self, name):
    return None

  def attribute_string(self, s, name):
    if self.__dict__.has_key(name):
      s.append("  '%s': '%s'," % (name, self.__dict__[name]))
    else:
      s.append("  # '%s': ?" % (name))

  def attribute_header(self, s, name):
    if self.__dict__.has_key(name):
      s.append('%s: %s' % (name, str(self.__dict__[name])))

# -----------------------------------------------------------------------------

# identifierType = string
# stringType = string
# xs:Name = string
# cpuNameType = string
# revisionType = string
# endianType = string
# xs:boolean = boolean
# scaledNonNegativeInteger = integer

#registersType


def get_string(node, tag, default = None):
  """Get the text string for the tag from the node"""
  try:
    return node.find(tag).text
  except AttributeError:
    return default

def get_integer(node, tag, default = None):
  text_value = get_string(node, tag, default)
  try:
    if text_value != default:
      text_value = text_value.strip().lower()
      if text_value.startswith('0x'):
        return int(text_value[2:], 16)  # hexadecimal
      elif text_value.startswith('#'):
        # TODO(posborne): Deal with strange #1xx case better
        #
        # Freescale will sometimes provide values that look like this:
        #   #1xx
        # In this case, there are a number of values which all mean the
        # same thing as the field is a "don't care".  For now, we just
        # replace those bits with zeros.
        text_value = text_value.replace('x', '0')[1:]
        is_bin = all(x in '01' for x in text_value)
        return int(text_value, 2) if is_bin else int(text_value)  # binary
      elif text_value.startswith('true'):
        return 1
      elif text_value.startswith('false'):
        return 0
      else:
        return int(text_value)  # decimal
  except ValueError:
    return default
  return default

def get_boolean(node, tag, default = None):
  n = get_integer(node, tag, default)
  if n is None:
    return default
  return n != 0

# -----------------------------------------------------------------------------

def string_node(node, tag, default = None):
  return (tag, get_string(node, tag, default))

def boolean_node(node, tag, default = None):
  return (tag, get_boolean(node, tag, default))

def integer_node(node, tag, default = None):
  return (tag, get_integer(node, tag, default))

# -----------------------------------------------------------------------------

class svd_parser(object):

  @classmethod
  def read_file(cls, path):
    return cls(ET.parse(path))

  def __init__(self, tree):
    self.tree = tree
    self.root = self.tree.getroot()

  def get_register(self, node):
    r = svd_register()
    r.attribute(integer_node(node, 'dim'))
    r.attribute(integer_node(node, 'dimIncrement'))
    r.attribute(string_node(node, 'dimIndex'))
    r.attribute(string_node(node, 'name'))
    r.attribute(string_node(node, 'displayName'))
    r.attribute(string_node(node, 'description'))
    r.description = string_cleanup(r.description)
    r.attribute(string_node(node, 'alternateGroup'))
    r.attribute(string_node(node, 'alternateRegister'))
    r.attribute(integer_node(node, 'addressOffset'))
    r.attribute(integer_node(node, 'size'))
    r.attribute(string_node(node, 'access'))
    r.attribute(string_node(node, 'protection'))
    r.attribute(integer_node(node, 'resetValue'))
    r.attribute(integer_node(node, 'resetMask'))
    r.attribute(string_node(node, 'dataType'))
    r.attribute(integer_node(node, 'resetMask'))
    r.attribute(string_node(node, 'modifiedWriteValues'))
    #<xs:element name="writeConstraint" type="writeConstraintType" minOccurs="0"/>
    r.attribute(string_node(node, 'readAction'))
    #<xs:element name="fields" type="fieldsType" minOccurs="0" maxOccurs="1"/>
    r.derivedFrom = node.get('derivedFrom')
    return r

  def get_address_block(self, node):
    block = svd_address_block()
    block.attribute(integer_node(node, 'offset'))
    block.attribute(integer_node(node, 'size'))
    block.attribute(string_node(node, 'usage'))
    return block

  def get_interrupt(self, node):
    i = svd_interrupt()
    i.attribute(string_node(node, 'name'))
    i.attribute(string_node(node, 'description'))
    i.description = string_cleanup(i.description)
    i.attribute(integer_node(node, 'value'))
    return i

  def get_peripheral(self, node):
    peripheral = svd_peripheral()
    peripheral.attribute(string_node(node, 'name'))
    peripheral.attribute(string_node(node, 'version'))
    peripheral.attribute(string_node(node, 'description'))
    peripheral.description = string_cleanup(peripheral.description)
    peripheral.attribute(string_node(node, 'alternatePeripheral'))
    peripheral.attribute(string_node(node, 'groupName'))
    peripheral.attribute(string_node(node, 'prependToName'))
    peripheral.attribute(string_node(node, 'appendToName'))
    peripheral.attribute(string_node(node, 'headerStructName'))
    peripheral.attribute(string_node(node, 'disableCondition'))
    peripheral.attribute(integer_node(node, 'baseAddress'))
    peripheral.addressBlock = [self.get_address_block(x) for x in node.findall('./addressBlock')]
    peripheral.interrupts = [self.get_interrupt(x) for x in node.findall('./interrupt')]
    peripheral.addressBlock = [self.get_address_block(x) for x in node.findall('./addressBlock')]
    peripheral.registers = [self.get_register(x) for x in node.findall('.//register')]
    peripheral.derivedFrom = node.get('derivedFrom')
    return peripheral

  def get_device(self):
    """return the device described by the svd file"""
    # cpu
    node = self.root.find('./cpu')
    cpu = svd_cpu()
    cpu.attribute(string_node(node, 'name'))
    cpu.attribute(string_node(node, 'revision'))
    cpu.attribute(string_node(node, 'endian'))
    cpu.attribute(boolean_node(node, 'mpuPresent'))
    cpu.attribute(boolean_node(node, 'fpuPresent'))
    cpu.attribute(boolean_node(node, 'fpuDP'))
    cpu.attribute(boolean_node(node, 'icachePresent'))
    cpu.attribute(boolean_node(node, 'dcachePresent'))
    cpu.attribute(boolean_node(node, 'itcmPresent'))
    cpu.attribute(boolean_node(node, 'dtcmPresent'))
    cpu.attribute(boolean_node(node, 'vtorPresent'))
    cpu.attribute(integer_node(node, 'nvicPrioBits'))
    cpu.attribute(boolean_node(node, 'vendorSystickConfig'))
    cpu.attribute(integer_node(node, 'deviceNumInterrupts'))
    cpu.attribute(integer_node(node, 'sauNumRegions'))
    #<xs:element name="sauRegionsConfig" minOccurs="0">

    # device
    node = self.root
    device = svd_device()
    device.attribute(string_node(node, 'vendor'))
    device.attribute(string_node(node, 'vendorID'))
    device.attribute(string_node(node, 'name'))
    device.attribute(string_node(node, 'series'))
    device.attribute(string_node(node, 'version'))
    device.attribute(string_node(node, 'description'))
    device.attribute(string_node(node, 'licenseText'))
    device.cpu = cpu
    device.attribute(string_node(node, 'headerSystemFilename'))
    device.attribute(string_node(node, 'headerDefinitionsPrefix'))
    device.attribute(integer_node(node, 'addressUnitBits'))
    device.attribute(integer_node(node, 'width'))
    device.peripherals = [self.get_peripheral(x) for x in self.root.findall('.//peripheral')]
    return device

# -----------------------------------------------------------------------------

def emit_header(f, device):
  """emit the informational file header"""
  s = []
  s.append('"""')
  s.append('generated by svd2py version %d' % svd2py_version)
  s.append('command: %s' % ' '.join(sys.argv))
  s.append('')
  device.attribute_header(s, 'vendor')
  device.attribute_header(s, 'name')
  device.attribute_header(s, 'description')
  device.attribute_header(s, 'series')
  device.attribute_header(s, 'version')
  s.append('"""')
  s.append('from regs import fld, fld_set, reg32, reg16, reg8, regset, memio')
  f.write('%s\n' % '\n'.join(s))

def emit_registers(f, device):
  s = []
  for p in device.peripherals:
    if p.derivedFrom and len(p.registers) == 0:
      continue
    if p.derivedFrom is None and len(p.registers) == 0:
      print('Weird: peripheral %s is not derived and has no registers' % p.name)
      continue
    if p.derivedFrom and len(p.registers):
      print('Weird: peripheral %s is derived and has registers' % p.name)
      continue
    s.append('r = []')
    for r in p.registers:
      if r.dim is not None:
        print('TODO: peripheral %s, register %s handle dimElementGroup register names' % (p.name, r.name))
        continue
      comment = (' # %s' % r.description, '')[r is None]
      s.append("r.append(reg%d('%s', 0x%x)%s" % (r.size, r.name, r.addressOffset, comment))
    s.append("%s_regs = regset('%s', r)" % (p.name, p.description))
    s.append('')
  f.write('%s\n' % '\n'.join(s))

def emit_memmap(f, device):
  """emit the memory map"""
  s = []
  s.append('memmap = {')
  for p in device.peripherals:
    # handle derivedFrom peripherals
    p_from = p
    if p.derivedFrom is not None:
      p_from = device.lookup_peripheral(p.derivedFrom)
    comment = (' # %s' % p_from.description, '')[p_from.description is None]
    assert len(p_from.addressBlock) >= 1
    if len(p_from.addressBlock) == 1:
      address = p.baseAddress + p_from.addressBlock[0].offset
      size = p_from.addressBlock[0].size
      regs = ('%s_regs' % p_from.name, "'%s'" % p_from.description)[len(p_from.registers) == 0]
      s.append("  '%s': (0x%08x, 0x%x, %s),%s" % (p.name, address, size, regs, comment))
    else:
      print('TODO: peripheral %s has more than 1 address block' % p.name)
  s.append('}')
  s.append('')
  f.write('%s\n' % '\n'.join(s))

def emit_vtable(f, device):
  """emit the vector table"""
  # get the interrupts - there maybe duplicates so we add them to a dictionary
  irqs = {}
  for p in device.peripherals:
    for i in p.interrupts:
      if irqs.has_key(i.value):
        # should be the same name
        assert irqs[i.value][0] == i.name
      else:
        irqs[i.value] = (i.name, i.description)
  # output them in sorted order
  s = []
  s.append('vtable = {')
  for i in sorted(irqs.keys()):
    (name, description) = irqs[i]
    comment = (' # %s' % description, '')[description is None]
    s.append("  %d: '%s',%s" % (i, name, comment))
  s.append('}')
  s.append('')
  f.write('%s\n' % '\n'.join(s))

def emit_cpu(f, device):
  """emit the cpu"""
  cpu = device.cpu
  s = []
  s.append('cpu = {')
  cpu.attribute_string(s, 'name')
  cpu.attribute_string(s, 'revision')
  cpu.attribute_string(s, 'endian')
  cpu.attribute_boolean(s, 'mpuPresent')
  cpu.attribute_boolean(s, 'fpuPresent')
  cpu.attribute_boolean(s, 'fpuDP')
  cpu.attribute_boolean(s, 'icachePresent')
  cpu.attribute_boolean(s, 'dcachePresent')
  cpu.attribute_boolean(s, 'itcmPresent')
  cpu.attribute_boolean(s, 'dtcmPresent')
  cpu.attribute_boolean(s, 'vtorPresent')
  cpu.attribute_integer(s, 'nvicPrioBits')
  cpu.attribute_boolean(s, 'vendorSystickConfig')
  cpu.attribute_integer(s, 'deviceNumInterrupts')
  s.append('}')
  s.append('')
  f.write('%s\n' % '\n'.join(s))

def emit_device(f, device):
  s = []
  s.append('device = {')
  device.attribute_string(s, 'name')
  device.attribute_string(s, 'vendor')
  device.attribute_string(s, 'series')
  device.attribute_string(s, 'version')
  s.append("  'vtable': vtable,")
  s.append("  'memmap': memmap,")
  s.append("  'cpu': cpu,")
  s.append('}')
  s.append('')
  f.write('%s\n' % '\n'.join(s))

def emit_code(fname, device):
  f = open(fname, 'w')
  emit_header(f, device)
  emit_registers(f, device)
  emit_vtable(f, device)
  emit_memmap(f, device)
  emit_cpu(f, device)
  emit_device(f, device)
  f.close()

# -----------------------------------------------------------------------------

def Print_Usage(argv):
  print 'Usage: %s <svd file>' % argv[0]

def error(msg, usage=False):
  print msg
  if usage:
    Print_Usage(sys.argv)
  sys.exit(1)

def Process_Options(argv):
  """process command line options"""
  global svd_file

  if len(argv) < 2:
    error('not enough arguments', True)

  svd_file = argv[1]

  if not os.path.isfile(svd_file):
    error('input file does not exist: %s' % svd_file)

# -----------------------------------------------------------------------------

def main():
  Process_Options(sys.argv)
  parser = svd_parser.read_file(svd_file)
  device = parser.get_device()
  emit_code('output.py', device)

main()

# -----------------------------------------------------------------------------
