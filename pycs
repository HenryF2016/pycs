#!/usr/bin/python
# -----------------------------------------------------------------------------
"""
pycs - Python Based ARM CoreSight Debug and Trace Tools
"""
# -----------------------------------------------------------------------------

import os
import sys
import getopt
import importlib

import conio
import cli

# -----------------------------------------------------------------------------

_version_str = 'pycs: ARM CoreSight Tool 1.0\n'
_usb_number = 0
_target = ''

# -----------------------------------------------------------------------------

def supported_targets():
  """return a list of supported targets"""
  targets = []
  for f in os.listdir('target'):
    name = f.split('.')[0]
    if name == '__init__':
      continue
    targets.append(name)
  return sorted(targets)

# -----------------------------------------------------------------------------

def Print_Usage(argv):
  print 'Usage: %s [options]' % argv[0]
  print 'Options:'
  print '%-15s%s' % ('-t <target>', 'target name')
  print '%-15s%s' % ('-u <number>', 'usb number of JLINK device to use')

def error(msg, usage=False):
  print msg
  if usage:
    Print_Usage(sys.argv)
  sys.exit(1)

def Process_Options(argv):
  """process command line options"""
  list_targets = False
  global _usb_number
  global _target

  try:
    (opts, args) = getopt.getopt(sys.argv[1:], "t:u:l")
  except getopt.GetoptError, err:
    error(str(err), True)
  # process options
  for (opt, val) in opts:
    if opt == '-u':
      _usb_number = int(val)
    elif opt == '-t':
      _target = val
    elif opt == '-l':
      list_targets = True

  # validate arguments
  targets = supported_targets()

  if list_targets:
    error('supported targets:\n%s' % '\n'.join(targets))

  if _target == '':
    error('must specify a target', True)

  if not _usb_number in range(16):
    error('usb number out of range')

  if not _target in targets:
    error('supported targets:\n%s' % '\n'.join(targets))

# -----------------------------------------------------------------------------

class user_interface(object):

  def __init__(self):
    self.io = conio.console()
    self.cli = cli.cli(self)

  def find_target(self, target):
    """find and select a target"""
    module = importlib.import_module('target.%s' % target)
    module.target(self, _usb_number)

  def exit(self):
    self.cli.exit()

  def put(self, s):
    self.io.put(s)

  def run(self):
    self.cli.run()

  def close(self):
    self.io.close()

  def cmd_help(self, ui, args):
    """general help"""
    self.cli.general_help()

#-----------------------------------------------------------------------------

def main():
  Process_Options(sys.argv)
  ui = user_interface()
  ui.put('\n%s' % _version_str)
  if _target:
    ui.find_target(_target)
  try:
    ui.run()
  except:
    ui.close()
    raise
  ui.close()
  sys.exit(0)

main()

# -----------------------------------------------------------------------------
